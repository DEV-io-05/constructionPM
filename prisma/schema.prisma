// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id              String     @id @default(uuid())
  firstName       String
  lastName        String
  username        String     @unique
  email           String     @unique
  phoneNumber     String
  password        String
  status          UserStatus
  role            UserRole
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  refreshTokens   RefreshToken[]
  passwordResetOTPs PasswordResetOTP[]

  UserSession UserSession[]

  UserActivity UserActivity[]

  Session Session[]
}


enum UserStatus {
ACTIVE
INACTIVE
SUSPENDED
}

enum UserRole {
ADMIN
PROJECT_MANAGER
TEAM_MEMBER
USER
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  revoked     Boolean  @default(false)

  @@unique([token(length: 254)])
}

model PasswordResetOTP {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  otp         String
  expiresAt   DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model UserSession {
  id            String      @id @default(cuid())
  userId        String
  refreshToken  String      @unique
  userAgent     String?
  lastActivity  DateTime    @default(now())
  expiresAt     DateTime
  isValid       Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ipAddress     String?
  deviceInfo    Json?

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([refreshToken])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  type      String   // LOGIN, LOGOUT, PASSWORD_RESET, etc.
  metadata  Json?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  ip           String?
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
